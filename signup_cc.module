<?php


/**
 * Implement hook_menu().
 *
 */
function signup_cc_menu() {
	$items = array();
	$items['signup/policy'] = array(
		'title' => 'Policy Newsletter Signup',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('signup_cc_form'),
		'access callback' => TRUE,
		'file' => 'functions.inc',
		'type' => MENU_CALLBACK,
	);
	$items['signup_cc/form/callback'] = array(
		'title' => 'Policy Newsletter Signup',
		'page callback' => 'signup_cc_form_callback',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	return $items;
}

/**
 * Does the very standard things that must be done in any normal callback.
 */
function signup_cc_callback_helper() {
	$form_state = array('storage' => NULL, 'submitted' => FALSE);
	$form_build_id = $_POST['form_build_id'];
	$form = form_get_cache($form_build_id, $form_state);
	$args = $form['#parameters'];
	$form_id = array_shift($args);
	$form_state['post'] = $form['#post'] = $_POST;
	// Enable the submit/validate handlers to determine whether AHAH-submittted.
	$form_state['ahah_submission'] = TRUE;
	$form['#programmed'] = $form['#redirect'] = FALSE;
	drupal_process_form($form_id, $form, $form_state);
	$form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
	return $form;
}

/**
 * Implements hook_init() to add module css.
 */
function signup_cc_init() {
	drupal_add_css(drupal_get_path('module', 'signup_cc') . '/signup_cc.css');
}
function signup_cc_form(&$form_state, $my_values = array()) {

	// get the list of options to populate the first dropdown
	$initial_options = _signup_cc_get_first_dropdown_options();

	// if we have a value for the first dropdown from $form_state['values'] we use
	// this both as the default value for the first dropdown and also as a
	// parameter to pass to the function that retrieves the options for the
	// second dropdown.
	$master_selection = !empty($form_state['values']['master_dropdown']) ? $form_state['values']['master_dropdown'] : t('- select -');


	$form = array();
		$form['intro'] = array(
			'#prefix' => '<div id="form-intro">',
			'#suffix' => '</div>',
			'#type' => 'markup',
			'#weight' => 0,
			'#value' => t('To complete your signup and to serve you better weâ€™d be grateful if you would take a moment to supply us with more information.')
		);
		$form['email_address'] = array(
			'#type' => 'fieldset',
			'#title' => t(''),
			'#weight' => 1,
			'#attributes' => array(
				'id' => 'email-address'
			)
		);
		$form['email_address']['temp_email'] = array(
			'#type' => 'textfield',
			'#title' => t('Email'),
			'#size' => 40,
			'#required' => TRUE,
		);
		$form['email_address']['email'] = array(
			'#type' => 'textfield',
			'#title' => t('Verify Email'),
			'#size' => 40,
			'#required' => TRUE,
			'#attributes' => array(
				'autocomplete' => 'off'
			)
		);
		$form['personal_info'] = array(
			'#type' => 'fieldset',
			'#title' => t('Personal Information'),
			'#weight' => 2,
			'#attributes' => array(
				'id' => 'personal-info'
			)
		);
		$form['personal_info']['salutation'] = array(
			'#type' => 'select',
			'#title' => t('Salutation'),
			'#options' => array(
				'select' => '- select -',
				'Dr.' => t('Dr.'),
				'Mr.' => t('Mr.'),
				'Ms.' => t('Ms.'),
				'Miss' => t('Miss'),
				'Mrs.' => t('Mrs.'),
				'Prof.' => t('Prof.'),
				'Rabbi' => t('Rabbi'),
				'Hon.' => t('Hon.'),
				'Assemblymember' => t('Assemblymember'),
				'Chancellor' => t('Chancellor'),
				'Governor' => t('Governor'),
				'Representative' => t('Representative'),
				'Senator' => t('Senator')
			),
			'#required' => FALSE,
		);
		$form['personal_info']['first'] = array(
			'#type' => 'textfield',
			'#title' => t('First Name'),
			'#size' => 50,
			'#required' => TRUE,
		);
		$form['personal_info']['last'] = array(
			'#type' => 'textfield',
			'#title' => t('Last Name'),
			'#size' => 50,
			'#required' => TRUE,
		);
		$form['personal_info']['country_phone'] = array(
			'#type' => 'textfield',
			'#title' => t('Phone'),
			'#size' => 3,
			'#default_value' => '1',
			'#maxlength' => 3,
			'#required' => FALSE,
			'#description' => t('country code'),
			'#attributes' => array(
				'id' => 'phone_cc'
			)
		);
		$form['personal_info']['phone'] = array(
			'#type' => 'textfield',
			'#title' => t(''),
			'#size' => 17,
			'#required' => FALSE,
		);
		$form['personal_info']['phone_ext'] = array(
			'#type' => 'textfield',
			'#title' => t(''),
			'#size' => 6,
			'#required' => FALSE,
			'#description' => t('extension'),
		);
		$form['employment'] = array(
			'#type' => 'fieldset',
			'#title' => t('Employer Information'),
			'#weight' => 3,
			'#attributes' => array(
				'id' => 'employment'
			)
		);
		$form['employment']['title'] = array(
			'#type' => 'textfield',
			'#title' => t('Title'),
			'#size' => 50,
			'#required' => TRUE,
		);
		$form['employment']['employer'] = array(
			'#type' => 'textfield',
			'#title' => t('Employer'),
			'#size' => 50,
			'#required' => TRUE,
		);
		$form['employment']['employer_type'] = array(
			'#type' => 'select',
			'#title' => t('Employer Type'),
			'#required' => FALSE,
			'#options' => array(
				'select' => '- select -',
				'School District Office' => t('School District Office'),
				'Pre K-12 School' => t('Pre K-12 School'),
				'University' => t('University'),
				'State Agency' => t('State Agency'),
				'Federal Government' => t('Federal Government'),
				'Pre K-12 School' => t('Pre K-12 School'),
				'Foundation' => t('Foundation'),
				'Non-Profit Organization' => t('Non-Profit Organization'),
				'Business' => t('Business'),
				'Self-Employed' => t('Self-Employed'),
				'Other' => t('Other'),
			),
		);
		$form['mailing_address'] = array(
			'#type' => 'fieldset',
			'#title' => t('Mailing Address'),
			'#weight' => 3,
			'#attributes' => array(
				'id' => 'mailing-address'
			)
		);
		$form['mailing_address']['address_type'] = array(
			'#prefix' => '<div id="address-type">',
			'#suffix' => '</div>',
			'#type' => 'radios',
			'#title' => t('Address Type'),
			'#required' => FALSE,
			'#default_value' => 0,
			'#options' => array(
					t('Office'),
					t('Home'),
			)
		);
		$form['mailing_address']['master_dropdown'] = array(
			'#type' => 'select',
			'#title' => 'Country',
			'#options' => $initial_options,
			'#default_value' => $master_selection,
			'#ahah' => array(
				'path' => 'signup_cc/form/callback',
				'wrapper' => 'dependent-dropdown-wrapper',
				// 'event' => 'change', // default value: does not need to be set explicitly.
		),
		'#attributes' => array('class' => 'master-dropdown'),
		'#description' => t('Select country; for US & Canada, state list below will be populated accordingly.'), 
	);
		$form['mailing_address']['address_1'] = array(
			'#type' => 'textfield',
			'#title' => t('Address 1'),
			'#size' => 50,
			'#required' => TRUE,
		);
		$form['mailing_address']['address_2'] = array(
			'#type' => 'textfield',
			'#title' => t('Address 2'),
			'#size' => 50,
			'#required' => FALSE,
		);
		$form['mailing_address']['city'] = array(
			'#type' => 'textfield',
			'#title' => t('City'),
			'#size' => 25,
			'#required' => TRUE,
		);
			// The CSS for this module hides this next button if JS is enabled.
		$form['mailing_address']['continue_to_dependent_dropdown'] = array(
			'#type' => 'submit',
			'#value' => t('Choose'),
			'#attributes' => array('class' => 'next-button'),
			'#submit' => array('signup_cc_form_continue'),
		);
		$form['mailing_address']['dependent_dropdown_holder']['dependent_dropdown'] = array(
			'#type' => 'select',
			'#title' => t('State/Province'),

		// when the form is rebuilt during processing (either AJAX or multistep),
		// the $master_selction variable will now have the new value and so the
		// options will change.
			'#options' => _signup_cc_get_second_dropdown_options($master_selection),
			'#default_value' => isset($my_values['dependent_dropdown']) ? $my_values['dependent_dropdown'] : '',
		);
		$form['mailing_address']['zip_code'] = array(
			'#type' => 'textfield',
			'#title' => t('Zip Code'),
			'#size' => 10,
			'#maxlength' => 10,
			'#required' => TRUE,
		);
		$form['submit'] = array(
			'#prefix' => '<div id="form-actions">',
			'#suffix' => '</div>',
			'#type' => 'submit',
			'#value' => 'Sign Up',
			'#weight' => 50
		);
		// Add basic css file
		drupal_add_css(drupal_get_path('module','signup_cc') . '/css/signup.cc.css');
		// Add additional validation using javaScript
		drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.example.js');
		drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.validate.min.js');
		drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.cookie.js');
		drupal_add_js(drupal_get_path('module','signup_cc') . '/js/signup.cc.form.js');
		drupal_add_js("$(document).ready(function(){
			$('input#edit-email').example('Please confirm your email address.');
			$('input#edit-first').example('Please enter your first name.');
			$('input#edit-last').example('Please enter your last name');
			$('input#edit-phone').example('888.555.1212');
			$('input#edit-phone-ext').example('1254');
			$('input#edit-address-1').example('Postal Street Address (50 chars max)');
			$('input#edit-address-2').example('Suite, Department, School, etc. (50 chars max)');
			$('input#edit-city').example('Postal City');
			$('input#edit-zip-code').example('95060-2243');
			$('input#edit-title').example('Please enter your preferred job title.');
			$('input#edit-employer').example('Please provide the name of your employer');
		}); ",'inline');
		
		if($form_state['ahah_submission']){
			// Clear the form errors.  We don't need to show any validation errors if this is an ahah submit, not a final submit
			drupal_get_messages('error');
			// Clear the form error state.
			form_set_error(null, '', true);
		}
		return $form;
}

/**
 * The AHAH callback. It processes the form using signup_callback_helper()
 * and then
 */
function signup_cc_form_callback() {
	$form = signup_cc_callback_helper();

	$changed_elements = $form['mailing_address']['dependent_dropdown_holder'];

	// Prevent duplicate wrappers.
	unset($changed_elements['#prefix'], $changed_elements['#suffix']);

	$output = theme('status_messages') . drupal_render($changed_elements);

	drupal_json(array(
		'status'   => TRUE,
		'data'     => $output,
	));
}

/**
* Submit handler for 'continue_to_dependent_dropdown'.
*/
function signup_cc_form_continue($form, &$form_state) {
	$values = $form_state['values'];
	unset($form_state['submit_handlers']);
	form_execute_handlers('submit', $form, $form_state);
	$form_state['my_values'] = $values;
	$form_state['rebuild'] = TRUE;
}

function signup_cc_form_validate($form, &$form_state) {
	$temp_mail = $form_state['values']['temp_email'];
	$email = $form_state['values']['email'];
	$sal = $form_state['values']['salutation'];
	$fname = $form_state['values']['first'];
	$lname = $form_state['values']['last'];
	$cc_phone = $form_state['values']['country_phone'];
	$phone = $form_state['values']['phone'];
	$phone_ext = $form_state['values']['phone_ext'];
	$title = $form_state['values']['title'];
	$employer = $form_state['values']['employer'];
	$employer_type = $form_state['values']['employer_type'];
	$role = $form_state['values']['role'];
	$address_1 = $form_state['values']['address_1'];
	$address_2 = $form_state['values']['address_2'];
	$city = $form_state['values']['city'];
	$country = $form_state['values']['master_dropdown'];
	$state = $form_state['values']['dependant_dropdown'];
	$zip_code = $form_state['values']['zip_code'];
	
	
// 	if (($address_1 == '') && ($address_2 == '')){
// 	  form_set_error('address_1', t('Please list a postal address so that you may receive our postal mailings.'));
// 	}
// 	if ( $city == '' ){
// 	  form_set_error('city', t('Please list a postal address so that you may receive our postal mailings.'));
// 	}
 	// if (!signup_cc_valid_email_address($email)) {
 	// 	form_set_error('email', t('The email address ' . $email . ' is not a valid email address.'));
 	// }
	//$mail_err = signup_valid_email_address2($email);
	//if ( $mail_err!='' ) {
	//	form_set_error('email', t($mail_err));
	//}
	// $test_country = ( $country=="US" || $country =="CA" || $country =="United States" || $country =="Canada" )? "US" : "INT";
	// 	if ($test_country=="US"){
	// 		 $msg_err = !( signup_valid_cc_postal_code( $zip_code, $test_country ))? '' : t('Please enter a valid postal code.');
	// 		 //$zip_code = (($msg_err !='') && ( $zip_code != ''))? signup_format_postal_code($zip_code,$test_country) : $zip_code;
	// 	}

}// end function signup form validate

function signup_cc_format_phone($phone,$cc_phone){
	// formats a phone number in US or International format
	// for consistent input in to database
	// US (NANP - North American Numbering Plan) phone types are: JM, TC, KN, LC, VC, MS, GD, DO, KY, AG, BS, VG, AI, BM
	$formattedPhone = '';
	$sep = "."; # the separator for areacode.prefix.suffix; usually "-" or "."
	$formattedPhone = preg_replace('/\D/', '', $phone); # remove non-numbers; need to rework to keep [-0-9\s\\/+\(\)]*
	if ( $cc_phone == '1' ){
		$formattedPhone = substr($formattedPhone,0,3).$sep.substr($formattedPhone,3,3).$sep.substr($formattedPhone,6,4); // format for US (NANP)
	} 
	return $formattedPhone;
} // function signup_cc_format_phone

/**
 * Default submit handler for form. This one happens when the main submit
 * button is pressed.
 */
function signup_cc_form_submit($form, &$form_state) {

		// If an AHAH submission, it's just the dependent dropdown working.
	if (!empty($form_state['ahah_submission'])) {
		return;
	}
	if ($form_state['clicked_button']['#id'] == 'edit-submit') {
			$form_state['rebuild'] = FALSE;
			$email = signup_cc_trim($form_state['values']['email']);
			
			if ($form_state['values']['salutation'] == 'select') {
				$sal = NULL;
			} else {
				$sal = $form_state['values']['salutation'];
			}
			
			$fname = signup_cc_trim($form_state['values']['first']);
			$lname = signup_cc_trim($form_state['values']['last']);
			$cc_phone = signup_cc_trim($form_state['values']['country_phone']);
			$temp_phone = signup_cc_trim($form_state['values']['phone']);
			$phone_ext = signup_cc_trim($form_state['values']['phone_ext']);
			$phone = signup_cc_format_phone($temp_phone,$cc_phone);
			$title = signup_cc_trim($form_state['values']['title']);
			$employer = signup_cc_trim($form_state['values']['employer']);
			$employer_type = $form_state['values']['employer_type'];
			
			if ($form_state['values']['employer_type'] == 'select') {
				$employer_type = NULL;
			} else {
				$employer_type = $form_state['values']['employer_type'];
			}
			
			if ($form_state['values']['role'] == 'select') {
				$role = NULL;
			} else {
				$role = $form_state['values']['role'];
			}
			
			$address_1 = signup_cc_trim($form_state['values']['address_1']);
			$address_2 = signup_cc_trim($form_state['values']['address_2']);
			$city = signup_cc_trim($form_state['values']['city']);
			
			if (empty($address_1)) {
				$address_type = NULL;
			} else {
				$address_type = $form_state['values']['address_type'];
			}
			
			if ($form_state['values']['master_dropdown'] == '- select -') {
				$country = NULL;
			} else {
				$country = $form_state['values']['master_dropdown'];
			}
			
			if ($form_state['values']['dependent_dropdown_holder']['dependent_dropdown'] == '- select -') {
				$state = NULL;
			} else {
				$state = $form_state['values']['dependent_dropdown_holder']['dependent_dropdown'];
			}
			
			$zip_code = signup_cc_trim($form_state['values']['zip_code']);
		}

		$policy_email = l('Policy Team','/contact/policy'); 
		
	module_load_include('php', 'signup_cc', 'cc_class');
	
	$ccContactOBJ = new CC_Contact();
	$ccListOBJ = new CC_List();
	
	$postFields = array();
	$postFields['email_address'] = $email;
	$postFields['first_name'] = $fname;
	$postFields['last_name'] = $lname;
	$postFields["address_line_1"] = $address_1;
	$postFields["address_line_2"] = $address_2;
	$postFields["zip_code"] = $zip_code;
	$postFields['mail_type'] = 'HTML';
	$postFields['lists'] = array('http://api.constantcontact.com/ws/customers/foresthayes/lists/1');
	
	$contactXML = $ccContactOBJ->createContactXML(null,$postFields);
	
	 if (!$ccContactOBJ->addSubscriber($contactXML)) {
	  drupal_set_message('There was an error while adding your information to our list, please contact ' . $policy_contact, 'error');
	}	else {
	  drupal_set_message('Thank you for signing up', 'status');
	}
}

function signup_cc_block($op = 'list', $delta = '', $edit = array()) {
	// The $op parameter determines what piece of information is being requested.
	switch ($op) {
		case 'list':
			$blocks['signup'] = array(
				'info' => t('Policy Signup'),
			);
			return $blocks;
		case 'view':
			switch ($delta) {
				case 'signup':
				// Add basic css file
				drupal_add_css(drupal_get_path('module','signup_cc') . '/css/signup.cc.css');
				// Add additional validation using javaScript
				drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.validate.min.js');
				drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.cookie.js');
				drupal_add_js(drupal_get_path('module','signup_cc') . '/js/signup.cc.form.js');
					$block['subject'] = t('Policy Signup');
					$block['content'] = drupal_get_form('signup_cc_block_form');
				break;
			}
		return $block;
	}
}

/**
 * Helper function to populate the first dropdown. This would normally be
 * pulling data from the database.
 *
 * @return array of options
 *
 * list of countries taken from: http://www.iso.org/iso/english_country_names_and_code_elements
 * countries that are listed in USPS state list (e.g. receive mail services from US) are 
 * removed and Country for the regions should be US
 */
function _signup_cc_get_first_dropdown_options() {
	// drupal_map_assoc() just makes an array('Strings' => 'Strings'...).
	return drupal_map_assoc(array(
		t('- select -'), 
		t('United States'), 
		t('Canada'),
		t('Afghanistan'),
		t('Ã…land Islands'),
		t('Albania'),
		t('Algeria'),
		t('Andorra'),
		t('Angola'),
		t('Anguilla'),
		t('Antarctica'),
		t('Antigua And Barbuda'),
		t('Argentina'),
		t('Armenia'),
		t('Aruba'),
		t('Australia'),
		t('Austria'),
		t('Azerbaijan'),
		t('Bahamas'),
		t('Bahrain'),
		t('Bangladesh'),
		t('Barbados'),
		t('Belarus'),
		t('Belgium'),
		t('Belize'),
		t('Benin'),
		t('Bermuda'),
		t('Bhutan'),
		t('Bolivia, Plurinational State Of'),
		t('Bosnia And Herzegovina'),
		t('Botswana'),
		t('Bouvet Island'),
		t('Brazil'),
		t('British Indian Ocean Territory'),
		t('Brunei Darussalam'),
		t('Bulgaria'),
		t('Burkina Faso'),
		t('Burundi'),
		t('Cambodia'),
		t('Cameroon'),
		t('Canada'),
		t('Cape Verde'),
		t('Cayman Islands'),
		t('Central African Republic'),
		t('Chad'),
		t('Chile'),
		t('China'),
		t('Christmas Island'),
		t('Cocos (Keeling) Islands'),
		t('Colombia'),
		t('Comoros'),
		t('Congo'),
		t('Congo, The Democratic Republic Of The'),
		t('Cook Islands'),
		t('Costa Rica'),
		t('CÃ´te Dâ€™ivoire'),
		t('Croatia'),
		t('Cuba'),
		t('Cyprus'),
		t('Czech Republic'),
		t('Denmark'),
		t('Djibouti'),
		t('Dominica'),
		t('Dominican Republic'),
		t('Ecuador'),
		t('Egypt'),
		t('El Salvador'),
		t('Equatorial Guinea'),
		t('Eritrea'),
		t('Estonia'),
		t('Ethiopia'),
		t('Falkland Islands (malvinas)'),
		t('Faroe Islands'),
		t('Fiji'),
		t('Finland'),
		t('France'),
		t('French Guiana'),
		t('French Polynesia'),
		t('French Southern Territories'),
		t('Gabon'),
		t('Gambia'),
		t('Georgia'),
		t('Germany'),
		t('Ghana'),
		t('Gibraltar'),
		t('Greece'),
		t('Greenland'),
		t('Grenada'),
		t('Guadeloupe'),
		t('Guam'),
		t('Guatemala'),
		t('Guernsey'),
		t('Guinea'),
		t('Guinea-bissau'),
		t('Guyana'),
		t('Haiti'),
		t('Heard Island And Mcdonald Islands'),
		t('Holy See (Vatican City State)'),
		t('Honduras'),
		t('Hong Kong'),
		t('Hungary'),
		t('Iceland'),
		t('India'),
		t('Indonesia'),
		t('Iran, Islamic Republic Of'),
		t('Iraq'),
		t('Ireland'),
		t('Isle Of Man'),
		t('Israel'),
		t('Italy'),
		t('Jamaica'),
		t('Japan'),
		t('Jersey'),
		t('Jordan'),
		t('Kazakhstan'),
		t('Kenya'),
		t('Kiribati'),
		t('Korea, Democratic Peopleâ€™s Republic Of'),
		t('Korea, Republic Of'),
		t('Kuwait'),
		t('Kyrgyzstan'),
		t('Lao Peopleâ€™s Democratic Republic'),
		t('Latvia'),
		t('Lebanon'),
		t('Lesotho'),
		t('Liberia'),
		t('Libyan Arab Jamahiriya'),
		t('Liechtenstein'),
		t('Lithuania'),
		t('Luxembourg'),
		t('Macao'),
		t('Macedonia, The Former Yugoslav Republic Of'),
		t('Madagascar'),
		t('Malawi'),
		t('Malaysia'),
		t('Maldives'),
		t('Mali'),
		t('Malta'),
		t('Martinique'),
		t('Mauritania'),
		t('Mauritius'),
		t('Mayotte'),
		t('Mexico'),
		t('Moldova, Republic Of'),
		t('Monaco'),
		t('Mongolia'),
		t('Montenegro'),
		t('Montserrat'),
		t('Morocco'),
		t('Mozambique'),
		t('Myanmar'),
		t('Namibia'),
		t('Nauru'),
		t('Nepal'),
		t('Netherlands'),
		t('Netherlands Antilles'),
		t('New Caledonia'),
		t('New Zealand'),
		t('Nicaragua'),
		t('Niger'),
		t('Nigeria'),
		t('Niue'),
		t('Norfolk Island'),
		t('Northern Mariana Islands'),
		t('Norway'),
		t('Oman'),
		t('Pakistan'),
		t('Palestinian Territory, Occupied'),
		t('Panama'),
		t('Papua New Guinea'),
		t('Paraguay'),
		t('Peru'),
		t('Philippines'),
		t('Pitcairn'),
		t('Poland'),
		t('Portugal'),
		t('Qatar'),
		t('RÃ©union'),
		t('Romania'),
		t('Russian Federation'),
		t('Rwanda'),
		t('Saint BarthÃ©lemy'),
		t('Saint Helena'),
		t('Saint Kitts And Nevis'),
		t('Saint Lucia'),
		t('Saint Martin'),
		t('Saint Pierre And Miquelon'),
		t('Saint Vincent And The Grenadines'),
		t('Samoa'),
		t('San Marino'),
		t('Sao Tome And Principe'),
		t('Saudi Arabia'),
		t('Senegal'),
		t('Serbia'),
		t('Seychelles'),
		t('Sierra Leone'),
		t('Singapore'),
		t('Slovakia'),
		t('Slovenia'),
		t('Solomon Islands'),
		t('Somalia'),
		t('South Africa'),
		t('South Georgia And The South Sandwich Islands'),
		t('Spain'),
		t('Sri Lanka'),
		t('Sudan'),
		t('Suriname'),
		t('Svalbard And Jan Mayen'),
		t('Swaziland'),
		t('Sweden'),
		t('Switzerland'),
		t('Syrian Arab Republic'),
		t('Taiwan, Province Of China'),
		t('Tajikistan'),
		t('Tanzania, United Republic Of'),
		t('Thailand'),
		t('Timor-leste'),
		t('Togo'),
		t('Tokelau'),
		t('Tonga'),
		t('Trinidad And Tobago'),
		t('Tunisia'),
		t('Turkey'),
		t('Turkmenistan'),
		t('Turks And Caicos Islands'),
		t('Tuvalu'),
		t('Uganda'),
		t('Ukraine'),
		t('United Arab Emirates'),
		t('United Kingdom'),
		t('United States'),
		t('United States Minor Outlying Islands'),
		t('Uruguay'),
		t('Uzbekistan'),
		t('Vanuatu'),
		t('Vatican City State'),"see Holy See",
		t('Venezuela, Bolivarian Republic Of'),
		t('Viet Nam'),
		t('Virgin Islands, British'),
		t('Virgin Islands, U.S.'),
		t('Wallis And Futuna'),
		t('Western Sahara'),
		t('Yemen'),
		t('Zambia'),
		t('Zimbabwe')	
		));
} // _signup_cc_get_first_dropdown_options

/**
 * Helper function to populate the second dropdown. This would normally be
 * pulling data from the database.
 *
 * @param key. This will determine which set of options is returned.
 *
 * @return array of options
 *
 * list of US states taken from: http://zip4.usps.com/zip4/zcl_0_landing_state.htm
 * list of CA states taken from: http://www.columbia.edu/kermit/postal.html#canada
 */
function _signup_cc_get_second_dropdown_options($key = '') {
	$options = array(
		t('- select -') => drupal_map_assoc(array(
			t('- select -')
		)),
		t('United States') => drupal_map_assoc(array(
			t('- select -'),
			t('Alabama'),
			t('Alaska'),
			t('American Samoa'),
			t('Arizona'),
			t('Arkansas'),
			t('California'),
			t('Colorado'),
			t('Connecticut'),
			t('Delaware'),
			t('District of Columbia'),
			t('Federated States of Micronesia'),
			t('Florida'),
			t('Georgia'),
			t('Guam'),
			t('Hawaii'),
			t('Idaho'),
			t('Illinois'),
			t('Indiana'),
			t('Iowa'),
			t('Kansas'),
			t('Kentucky'),
			t('Louisiana'),
			t('Maine'),
			t('Marshall Islands'),
			t('Maryland'),
			t('Massachusetts'),
			t('Michigan'),
			t('Minnesota'),
			t('Mississippi'),
			t('Missouri'),
			t('Montana'),
			t('Nebraska'),
			t('Nevada'),
			t('New Hampshire'),
			t('New Jersey'),
			t('New Mexico'),
			t('New York'),
			t('North Carolina'),
			t('North Dakota'),
			t('Northern Mariana Islands'),
			t('Ohio'),
			t('Oklahoma'),
			t('Oregon'),
			t('Palau'),
			t('Pennsylvania'),
			t('Puerto Rico'),
			t('Rhode Island'),
			t('South Carolina'),
			t('South Dakota'),
			t('Tennessee'),
			t('Texas'),
			t('Utah'),
			t('Vermont'),
			t('Virgin Islands'),
			t('Virginia'),
			t('Washington'),
			t('West Virginia'),
			t('Wisconsin'),
			t('Wyoming'),
			t('Armed Forces Africa'),
			t('Armed Forces Americas'),
			t('Armed Forces Canada'),
			t('Armed Forces Europe'),
			t('Armed Forces Middle East'),
			t('Armed Forces Pacific')			
		)),
		t('Canada') => drupal_map_assoc(array(
			t('- select -'),
			t('Alberta'),
			t('British Columbia'),
			t('Manitoba'),
			t('New Brunswick'),
			t('Newfoundland and Labrador'),
			t('Nova Scotia'),
			t('Northwest Territories'),
			t('Nunavut'),
			t('Ontario'),
			t('Prince Edward Island'),
			t('QuÃ©bec'),
			t('Saskatchewan'),
			t('Yukon Territory')
		)),
	);
	if (isset($options[$key])) {
		return $options[$key];
	}
	else {
		return array();
	}
} // end _signup_cc_get_second_dropdown_options

function signup_cc_block_form($form_state) {
	$form['email'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#size' => 40,
		'#required' => TRUE,
	);	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Sign Up'
	);
	$form['#redirect'] = 'signup/policy';
	return $form;
}

// Validate block form
function signup_cc_block_form_validate($form, &$form_state) {
	$mail = $form_state['values']['email'];
	if (!signup_cc_valid_email_address($mail)) {
		form_set_error('mail', t('The e-mail address ' . $mail . ' is not a valid email address.'));
	}
}

// Submit block form
function signup_cc_block_form_submit($form, &$form_state) {
	drupal_set_message(variable_get('sign_up_update', 'Please provide additional information.'));
}