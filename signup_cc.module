<?php


/**
 * Implement hook_menu().
 *
 */
function signup_cc_menu() {
	$items = array();
	$items['signup/policy'] = array(
		'title' => 'Policy Newsletter Signup',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('signup_cc_form'),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	return $items;
}

function signup_cc_form(&$form_state, $my_values = array()) {
	$form = array();
		$form['intro'] = array(
			'#prefix' => '<div id="form-intro">',
			'#suffix' => '</div>',
			'#type' => 'markup',
			'#weight' => 0,
			'#value' => t('This is the intro message')
		);
		$form['email_address'] = array(
			'#type' => 'fieldset',
			'#title' => t(''),
			'#weight' => 1,
			'#attributes' => array(
				'id' => 'email-address'
			)
		);
		$form['email_address']['temp_email'] = array(
			'#type' => 'textfield',
			'#title' => t('Email'),
			'#size' => 40,
			'#required' => TRUE,
		);
		$form['email_address']['email'] = array(
			'#type' => 'textfield',
			'#title' => t('Verify Email'),
			'#size' => 40,
			'#required' => TRUE,
			'#attributes' => array(
				'autocomplete' => 'off'
			)
		);
		$form['personal_info'] = array(
			'#type' => 'fieldset',
			'#title' => t('Personal Information'),
			'#weight' => 2,
			'#attributes' => array(
				'id' => 'personal-info'
			)
		);
		$form['personal_info']['salutation'] = array(
			'#type' => 'select',
			'#title' => t('Salutation'),
			'#options' => array(
				'select' => '- select -',
				'Dr.' => t('Dr.'),
				'Mr.' => t('Mr.'),
				'Ms.' => t('Ms.'),
				'Miss' => t('Miss'),
				'Mrs.' => t('Mrs.')
			),
			'#required' => FALSE,
		);
		$form['personal_info']['first'] = array(
			'#type' => 'textfield',
			'#title' => t('First Name'),
			'#size' => 40,
			'#required' => TRUE,
		);
		$form['personal_info']['last'] = array(
			'#type' => 'textfield',
			'#title' => t('Last Name'),
			'#size' => 40,
			'#required' => TRUE,
		);
		$form['personal_info']['country_phone'] = array(
			'#type' => 'textfield',
			'#title' => t('Phone'),
			'#size' => 6,
			'#default_value' => '1',
			'#maxlength' => 3,
			'#required' => FALSE,
			'#description' => t('country code')
		);
		$form['personal_info']['phone'] = array(
			'#type' => 'textfield',
			'#title' => t(''),
			'#size' => 27,
			'#required' => FALSE,
		);
		$form['employment'] = array(
			'#type' => 'fieldset',
			'#title' => t('Employer Information'),
			'#weight' => 3,
			'#attributes' => array(
				'id' => 'employment'
			)
		);
		$form['employment']['title'] = array(
			'#type' => 'textfield',
			'#title' => t('Title'),
			'#size' => 40,
			'#required' => FALSE,
		);
		$form['employment']['employer'] = array(
			'#type' => 'textfield',
			'#title' => t('Employer'),
			'#size' => 40,
			'#required' => FALSE,
		);
		$form['employment']['employer_type'] = array(
			'#type' => 'select',
			'#title' => t('Employer Type'),
			'#required' => FALSE,
			'#options' => array(
				'select' => '- select -',
				'School District Office' => t('School District Office'),
				'Pre K-12 School' => t('Pre K-12 School'),
				'University' => t('University'),
				'State Agency' => t('State Agency'),
				'Federal Government' => t('Federal Government'),
				'Pre K-12 School' => t('Pre K-12 School'),
				'Foundation' => t('Foundation'),
				'Non-Profit Organization' => t('Non-Profit Organization'),
				'Business' => t('Business'),
				'Self-Employed' => t('Self-Employed'),
				'Other' => t('Other'),
			),
		);
		$form['mailing_address'] = array(
			'#type' => 'fieldset',
			'#title' => t('Mailing Address'),
			'#weight' => 3,
			'#attributes' => array(
				'id' => 'mailing-address'
			)
		);
		$form['mailing_address']['address_type'] = array(
			'#prefix' => '<div id="address-type">',
			'#suffix' => '</div>',
			'#type' => 'radios',
			'#title' => t('Address Type'),
			'#required' => FALSE,
			'#default_value' => 0,
			'#options' => array(
					t('Office'),
					t('Home'),
			)
		);
		$form['mailing_address']['address_1'] = array(
			'#type' => 'textfield',
			'#title' => t('Address 1'),
			'#size' => 40,
			'#required' => FALSE,
		);
		$form['mailing_address']['address_2'] = array(
			'#type' => 'textfield',
			'#title' => t('Address 2'),
			'#size' => 40,
			'#required' => FALSE,
		);
		$form['mailing_address']['city'] = array(
			'#type' => 'textfield',
			'#title' => t('City'),
			'#size' => 25,
			'#required' => FALSE,
		);
		$form['mailing_address']['zip_code'] = array(
			'#type' => 'textfield',
			'#title' => t('Zip Code'),
			'#size' => 10,
			'#maxlength' => 5,
			'#required' => TRUE,
		);
		$form['submit'] = array(
			'#prefix' => '<div id="form-actions">',
			'#suffix' => '</div>',
			'#type' => 'submit',
			'#value' => 'Sign Up',
			'#weight' => 50
		);
		// Add basic css file
		drupal_add_css(drupal_get_path('module','signup_cc') . '/css/signup.cc.css');
		// Add additional validation using javaScript
		drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.validate.min.js');
		drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.cookie.js');
		drupal_add_js(drupal_get_path('module','signup_cc') . '/js/signup.cc.form.js');

		return $form;
}

/**
 * Default submit handler for form. This one happens when the main submit
 * button is pressed.
 */
function signup_cc_form_submit($form, &$form_state) {
	
	module_load_include('php', 'signup_cc', 'cc_class');
		
	$ccContactOBJ = new CC_Contact();
	$ccListOBJ = new CC_List();
	
	$postFields = array();
	$postFields['email_address'] = $form_state['values']['email'];
	$postFields['first_name'] = $form_state['values']['first'];
	$postFields['last_name'] = $form_state['values']['last'];
	$postFields["address_line_1"] = $form_state['values']['address_1'];
	$postFields["address_line_2"] = $form_state['values']['address_2'];
	$postFields["zip_code"] = $form_state['values']["zip_code"];
	$postFields['mail_type'] = 'HTML';
	$postFields['lists'] = array('http://api.constantcontact.com/ws/customers/foresthayes/lists/1');
	
	$contactXML = $ccContactOBJ->createContactXML(null,$postFields);
	
	 if (!$ccContactOBJ->addSubscriber($contactXML)) {
	  drupal_set_message('There was an error while adding your information to our list, please contact help@example.com', 'error');
	}	else {
	  drupal_set_message('Thank you for signing up', 'status');
	}
}

function signup_cc_block($op = 'list', $delta = '', $edit = array()) {
	// The $op parameter determines what piece of information is being requested.
	switch ($op) {
		case 'list':
			$blocks['signup'] = array(
				'info' => t('Policy Signup'),
			);
			return $blocks;
		case 'view':
			switch ($delta) {
				case 'signup':
				// Add basic css file
				drupal_add_css(drupal_get_path('module','signup_cc') . '/css/signup.cc.css');
				// Add additional validation using javaScript
				drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.validate.min.js');
				drupal_add_js(drupal_get_path('module','signup_cc') . '/js/jquery.cookie.js');
				drupal_add_js(drupal_get_path('module','signup_cc') . '/js/signup.cc.form.js');
					$block['subject'] = t('Policy Signup');
					$block['content'] = drupal_get_form('signup_cc_block_form');
				break;
			}
		return $block;
	}
}


function signup_cc_block_form($form_state) {
	$form['email'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#size' => 40,
		'#required' => TRUE,
	);	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Sign Up'
	);
	$form['#redirect'] = 'signup/policy';
	return $form;
}

// Validate block form
function signup_cc_block_form_validate($form, &$form_state) {
	$mail = $form_state['values']['email'];
	if (!signup_cc_valid_email_address($mail)) {
		form_set_error('mail', t('The e-mail address ' . $mail . ' is not a valid email address.'));
	}
}

// Submit block form
function signup_cc_block_form_submit($form, &$form_state) {
	drupal_set_message(variable_get('sign_up_update', 'Please provide additional information.'));
}


function signup_cc_valid_email_address($mail) {
	$user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
	$domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
	$ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
	$ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';

	return preg_match("/^$user@($domain|(\[($ipv4|$ipv6)\]))$/", $mail);
}

